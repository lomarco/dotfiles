#!/bin/bash

set -euo pipefail

IFS=$'\n\t'

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
RESET='\033[0m'

header() {
  echo -e "\n${CYAN}=== $* ===${RESET}"
}

error() {
  echo -e "${RED}Error:${RESET} $*" >&2
}

ask() {
    local prompt default reply pattern allow_empty
    prompt="$1"
    default="${2-}"
    pattern="${3-}"
    allow_empty="${4-false}"

    while :; do
        if [[ -n "$default" ]]; then
            read -rp "$(echo -e "${YELLOW}$prompt [${default}]: ${RESET}")" reply
            reply="${reply:-$default}"
        else
            read -rp "$(echo -e "${YELLOW}$prompt: ${RESET}")" reply
        fi

        if [[ -z "$reply" && "$allow_empty" != true ]]; then
            error "Answer cannot be empty."
            continue
        fi

        if [[ -n "$pattern" && ! "$reply" =~ $pattern ]]; then
            error "Invalid input format."
            continue
        fi

        echo "$reply"
        break
    done
}

confirm() {
    local prompt default reply
    prompt="$1"
    default="${2-no}"
    while :; do
        read -rp "$(echo -e "${YELLOW}$prompt (yes/no) [${default}]: ${RESET}")" reply
        reply="${reply:-$default}"
        case "${reply,,}" in
            y|yes) echo "yes"; return 0 ;;
            n|no)  echo "no"; return 1 ;;
            *)     error "Please enter yes or no." ;;
        esac
    done
}

header "Starting base Arch Linux system installation"

#paru:
#waterfox
#scc
#man-pages-dev
MOUNT_POINT="/mnt"
DEFAULT_PACKAGES=(
  "vim"
  "neovim"
  "vi"
  "efibootmgr"
  "base"
  "base-devel"
  "git"
  "make"
  "mako"
  "sway"
  "wayland"
  "mesa"
  "fasm"
  "llvm"
  "clang"
  "i3status"
  "wget"
  "links"
  "vulkan-radeon"
  "zsh"
  "qutebrowser"
  "iwd"
  "wlsunset"
  "grim"
  "slurp"
  "foot"
  "tmux"
  "lldb"
  "gdb"
  "wireguard-tools"
  "translate-shell"
  "bluez"
  "bluez-utils"
  "pipewire"
  "pipewire-pulse"
  "pipewire-alsa"
  "pass"
  "lf"
  "ncdu"
  "rsync"
  "reflector"
  "mkinitcpio"
  "htop"
  "bc"
  "man-pages"
  "man-db"
  "gnupg"
  "mpv"
  "swayimg"
  "swaybg"
  "distcc"
  "lld"
  "unzip"
  "wmenu"
  "less"
  "openssh"
  "wl-clipboard"
  "ntfs-3g"
  "linux-firmware"
  "linux"
  "linux-headers"
  "cmake"
  "meson"
  "cpio"
  "xz"
  "perl"
  "devtools"
  "nmap"
  "arch-install-scripts"
  "amdvlk"
  "vulkan-tools"
  "hyperfine"
  "rustup"
  "parted"
  "dosfstools"
  "w3m"
  "qemu"
  "wayvnc"
  "npm"
  "arch-audit"
  "archlinux-keyring"
  "pacman-contrib"
  "ttf-cascadia-code-nerd"
  "ttf-cascadia-code"
  "gnu-free-fonts"
)

echo -e "${CYAN}Packages to install:${RESET} ${DEFAULT_PACKAGES[*]}"

if confirm "Do you want to change the package list?"; then
    while :; do
        read -rp "$(echo -e "${YELLOW}Enter package names separated by space:${RESET} ")" -a PACKAGES
        if [[ "${#PACKAGES[@]}" -eq 0 ]]; then
            error "Package list cannot be empty."
            continue
        fi
        break
    done
else
    PACKAGES=("${DEFAULT_PACKAGES[@]}")
fi

echo -e "${GREEN}Installing packages:${RESET} ${PACKAGES[*]} into $MOUNT_POINT"

if [[ ! -d "$MOUNT_POINT" ]]; then
    error "Mount point '$MOUNT_POINT' not found."
    exit 1
fi

if ! command -v pacstrap &>/dev/null; then
    error "pacstrap command not found. Please run this script within Arch Linux environment."
    exit 1
fi

pacstrap "$MOUNT_POINT" "${PACKAGES[@]}"

cat > /tmp/chroot_setup.sh <<"EOF"
#!/bin/bash
#set -euo pipefail
IFS=$'\n\t'

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
RESET='\033[0m'

header() {
  echo -e "\n${CYAN}=== $* ===${RESET}"
}

error() {
  echo -e "${RED}Error:${RESET} $*" >&2
}

ask() {
    local prompt default reply pattern allow_empty
    prompt="$1"
    default="${2-}"
    pattern="${3-}"
    allow_empty="${4-false}"

    while :; do
        if [[ -n "$default" ]]; then
            read -rp "$(echo -e "${YELLOW}$prompt [${default}]: ${RESET}")" reply
            reply="${reply:-$default}"
        else
            read -rp "$(echo -e "${YELLOW}$prompt: ${RESET}")" reply
        fi

        if [[ -z "$reply" && "$allow_empty" != true ]]; then
            error "Answer cannot be empty."
            continue
        fi

        if [[ -n "$pattern" && ! "$reply" =~ $pattern ]]; then
            error "Invalid input format."
            continue
        fi

        echo "$reply"
        break
    done
}

confirm() {
    local prompt default reply
    prompt="$1"
    default="${2-no}"
    while :; do
        read -rp "$(echo -e "${YELLOW}$prompt (yes/no) [${default}]: ${RESET}")" reply
        reply="${reply:-$default}"
        case "${reply,,}" in
            y|yes) echo "yes"; return 0 ;;
            n|no)  echo "no"; return 1 ;;
            *)     error "Please enter yes or no." ;;
        esac
    done
}

header "Configuring system inside chroot"

timezone=$(ask "Enter timezone (e.g. Europe/Moscow)" "Europe/Moscow")
if [[ ! -f "/usr/share/zoneinfo/$timezone" ]]; then
    error "Timezone '$timezone' not found. Defaulting to UTC."
    timezone="UTC"
fi
ln -sf "/usr/share/zoneinfo/$timezone" /etc/localtime
hwclock --systohc

echo -e "${CYAN}Available locales to enable:${RESET}"
echo "1) en_US.UTF-8 UTF-8"
echo "2) ru_RU.UTF-8 UTF-8"

locale1=$(ask "First locale to enable" "en_US.UTF-8 UTF-8")
locale2=$(ask "Second locale to enable" "ru_RU.UTF-8 UTF-8" "" true)

if [[ -n "$locale1" ]]; then
    sed -i "s/^#\?\($locale1\)/\1/" /etc/locale.gen
fi
if [[ -n "$locale2" && "$locale2" != "$locale1" ]]; then
    sed -i "s/^#\?\($locale2\)/\1/" /etc/locale.gen
fi
locale-gen

lang_default="en_US.UTF-8"
echo "LANG=$lang_default" > /etc/locale.conf

hostname_default="archlinux"
hostname=$(ask "Enter hostname" "$hostname_default")
echo "$hostname" > /etc/hostname

create_user=$(confirm "Create a new user?" "yes")
username=""
if [[ "$create_user" == "yes" ]]; then
    username=$(ask "Enter username" "user" '^[a-z_][a-z0-9_-]*[$]?$' false)
    groups="wheel,storage,video,input,audio"
    shell_default="/bin/bash"
    shell_input=$(ask "Enter login shell" "$shell_default")
    
    useradd -m -G "$groups" -s "$shell_input" "$username"
    
    echo -e "${GREEN}Set password for user '$username':${RESET}"
    passwd "$username"
    
    if ! grep -q "^%wheel ALL=(ALL) ALL" /etc/sudoers; then
        echo "%wheel ALL=(ALL) ALL" >> /etc/sudoers
    fi
fi

echo -e "${GREEN}Set root password:${RESET}"
passwd

enable_iwd=$(confirm "Enable iwd (Wi-Fi daemon) service?" "yes")
if [[ "$enable_iwd" == "yes" ]]; then
    if systemctl list-unit-files | grep -q '^iwd.service'; then
      systemctl enable iwd
    else
      echo -e "${YELLOW}Warning:${RESET} iwd service not found. Skipping enable."
    fi
fi

header "Cloning dotfiles repository and running install scripts"

if [[ -n "$username" ]]; then
    dotfiles_repo_url=$(ask "Enter dotfiles git repository URL" "https://github.com/lomarco/dotfiles.git")
    tmp_dotfiles_dir="/home/$username/dotfiles"
    su - "$username" -c "git clone --depth 1 '$dotfiles_repo_url' '$tmp_dotfiles_dir'" || {
        error "Failed to clone dotfiles repository."
    }
    if [[ -f "$tmp_dotfiles_dir/install" ]]; then
        chmod +x "$tmp_dotfiles_dir/install"
        pushd "$tmp_dotfiles_dir" > /dev/null
        ./install || echo -e "${YELLOW}Warning:${RESET} Error running ./install."
        efistub-boot || echo -e "${YELLOW}Warning:${RESET} Error running efistub-boot."
        popd > /dev/null
    else
        echo -e "${YELLOW}Warning:${RESET} install script not found in dotfiles repository."
    fi
else
    echo "User not created. Skipping dotfiles installation."
fi

update_mandb=$(confirm "Update mandb index?" "yes")
if [[ "$update_mandb" == "yes" ]]; then
  mandb
fi

install_paru=$(confirm "Install paru (AUR helper)?" "yes")
if [[ "$install_paru" == "yes" ]]; then
    if [[ -n "$username" && "$(id -u "$username" 2>/dev/null || echo "")" != "" ]]; then
        header "Installing paru as user $username"
        su - "$username" -c '
            set -e
            tmp_dir=$(mktemp -d)
            git clone --depth 1 https://aur.archlinux.org/paru.git "$tmp_dir/paru"
            cd "$tmp_dir/paru"
            makepkg -si --noconfirm
            rm -rf "$tmp_dir"
        '
    else
        echo -e "${YELLOW}Skipping paru installation: user not created or does not exist.${RESET}"
    fi
fi

header "chroot configuration done"
EOF

header "Copying and executing chroot setup script..."

cp /tmp/chroot_setup.sh "$MOUNT_POINT/root/"
chmod +x "$MOUNT_POINT/root/chroot_setup.sh"

arch-chroot "$MOUNT_POINT" /root/chroot_setup.sh

rm -f "$MOUNT_POINT/root/chroot_setup.sh" /tmp/chroot_setup.sh

echo -e "${GREEN}Installation complete.${RESET} You can proceed with bootloader setup and further configuration."
