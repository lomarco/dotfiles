#!/bin/bash
set -euo pipefail

disk="/dev/nvme0n1"
efi_part_num=1
swap_part_num=2
root_part_num=3
label="Linux"
kernel_path="\\vmlinuz-linux"
ucode_path="" # if ucode is not needed, put ""
initrd_path="\\initramfs-linux.img"
boot_options="rw loglevel=3 quiet"
other_flags="--remove-dups --verbose"

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
NC='\033[0m'

info() {
  echo -e "${GREEN}[INFO]${NC} $*"
}

warn() {
  echo -e "${YELLOW}[WARN]${NC} $*"
}

error_exit() {
  echo -e "${RED}[ERROR]${NC} $*" >&2
  exit 1
}

if [[ $EUID -ne 0 ]]; then
  error_exit "This script must be run as root or with sudo"
fi

if ! command -v efibootmgr &>/dev/null; then
  error_exit "efibootmgr not found. Please install it."
fi

root_uuid=$(blkid -s UUID -o value "${disk}p${root_part_num}" 2>/dev/null || true)
swap_uuid=$(blkid -s UUID -o value "${disk}p${swap_part_num}" 2>/dev/null || true)

if [[ -z "$root_uuid" ]]; then
  error_exit "Failed to get UUID for root partition ${disk}p${root_part_num}"
fi

if [[ -z "$swap_uuid" ]]; then
  warn "No swap UUID found for ${disk}p${swap_part_num}, continuing without it."
fi

if ! blkid "${disk}p${efi_part_num}" &>/dev/null; then
  error_exit "EFI system partition ${disk}p${efi_part_num} not found"
fi

root_param="root=UUID=$root_uuid"
swap_param=""
if [[ -n "$swap_uuid" ]]; then
  swap_param="resume=UUID=$swap_uuid"
fi

unicode_params=("$root_param" "$swap_param" "$boot_options")

if [[ -n "$ucode_path" ]]; then
  unicode_params+=("initrd=$ucode_path")
fi

unicode_params+=("initrd=$initrd_path")

unicode_str=$(IFS=' '; echo "${unicode_params[*]}" | xargs)

info "Preparing to create UEFI boot entry with parameters:"
info "Disk: $disk"
info "EFI Partition: ${disk}p${efi_part_num}"
info "Label: $label"
info "Kernel path: $kernel_path"
info "Loader params: $unicode_str"

existing_bootnums=$(efibootmgr | grep -i "Boot[0-9]\{4\}.*$label" | awk -F' ' '{print $1}' | sed 's/Boot//;s/\*//')

if [[ -n "$existing_bootnums" ]]; then
  info "Found existing EFI boot entries with label '$label': $existing_bootnums"
  for num in $existing_bootnums; do
    info "Deleting existing boot entry Boot$num"
    efibootmgr --delete-bootnum --bootnum "$num"
  done
else
  info "No existing EFI boot entries found with label '$label'"
fi

efibootmgr --create \
  --disk "$disk" --part "$efi_part_num" \
  --label "$label" \
  --loader "$kernel_path" \
  --unicode "$unicode_str" \
  $other_flags

info "UEFI boot entry created successfully."
